{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","getSortByClass","bind","handleLocationChange","handleSortByChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73a3b54a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n            <img src={this.props.business.imageSrc} alt=''/>\r\n            </div>\r\n            <h2>{this.props.business.name}</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                    <p>{this.props.business.address}</p>\r\n                    <p>{this.props.business.city}</p>\r\n                    <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                    <h3>{this.props.business.category.toUpperCase()}</h3>\r\n                    <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\r\n                    <p>{`${this.props.business.reviewCount} reviews`}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                { \r\n                    this.props.businesses.map(function(business) {\r\n                        return <Business business={business} key={business.id}/>;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: 'Pizza',\r\n            location: '',\r\n            sortBy: 'best_match'\r\n        };\r\n        this.getSortByClass = this.getSortByClass.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSortByChange = this.handleSortByChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        };\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption) {\r\n            return 'active';\r\n        } else {\r\n            return '';\r\n        };\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n            sortBy: sortByOption\r\n        })\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({\r\n            location: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\" onClick={this.handleSearch}>\r\n                    <a>Find Pizza!</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchBar;","const apiKey = 'AcbHKbFaJqbt98sIvEZ9wtTMQ-Y2SFggPVqEOXtuOm3ZIp4ijncf8IfbFoD_6VfzKYOS1gstXPAao-F0NLKAXlU4GEBJ60pDCAmGyZc4J_Etb5TFwfsgW7nFOzUKX3Yx';\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business => {\r\n                return {\r\n                    id: business.id,\r\n                    imageSrc: business.image_url,\r\n                    name: business.name,\r\n                    address: business.location.address1,\r\n                    city: business.location.city,\r\n                    state: business.location.state,\r\n                    zipCode: business.location.zip_code,\r\n                    category: business.categories[0].title,\r\n                    rating: business.rating,\r\n                    reviewCount: business.review_count\r\n                };\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  \n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    });\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <h1>Pizza Finder</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses}/>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}